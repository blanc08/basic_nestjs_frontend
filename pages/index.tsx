import {
  ApolloClient,
  ApolloProvider,
  gql,
  InMemoryCache,
  useQuery,
} from '@apollo/client';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useRef, useState } from 'react';
import SignInForm from '../components/organisms/SignInForm';
import client from '../config/api/apollo-client';
import { setSignin } from '../services/auth';
import styles from '../styles/Home.module.css';

const getCats = gql`
  {
    cats {
      id
      name
    }
  }
`;

const Home: NextPage = () => {
  return (
    <main className="md:flex flex-row h-screen">
      <Head>
        <title>Learn NestJs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="md:grow bg-brand-green flex items-center text-brand-white">
        <div className="md:p-16 p-8">
          <h4 className="md:text-4xl text-2xl font-bold">
            Welcome to Learning Page!
          </h4>
          <p className="text-xl md:text-2xl">
            <code className="code text-sm">
              A testing app to lear NestJs & GraphQL
            </code>
          </p>

          <footer className="my-6 ">
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span className="h-2">
                <Image
                  src="/vercel.svg"
                  alt="Vercel Logo"
                  width={72}
                  height={16}
                />
              </span>
            </a>
          </footer>
        </div>
      </section>
      {/* signin section */}
      <SignInForm />
    </main>
  );
};

// export async function getServerSideProps() {
//   // Init Apollo Client
//   const client = new ApolloClient({
//     uri: 'http://localhost:4000/graphql',
//     cache: new InMemoryCache(),
//   });

//   // fetch data from server
//   const { data } = await client.query({
//     query: gql`
//       {
//         cats {
//           id
//           name
//         }
//       }
//     `,
//   });

//   return {
//     props: { data },
//   };
// }

function Cats() {
  const { loading, error, data } = useQuery(getCats);

  console.log(data);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error :(</p>;

  return data.cats.map(({ id, name }: { id: number; name: string }) => (
    <div key={id}>
      <p>{name}</p>
    </div>
  ));
}

export default Home;
